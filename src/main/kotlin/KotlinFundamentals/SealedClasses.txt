Sealed Classes

restricted class
it can have its own constructor, then all the subclasses need the constructor parameter from the top level class in there
constructor as well
provides control over the inheritance
all subclasses are known at compile time
you have a base class that is sealed and then other classes that inherit from it.
used in "when" clause
the compiler knows how many sub classes there are and need to handle each when using "when"
you have access to the methods and properties in each class at that part of the when statement handler.

inner class
if you use "inner class" you have access to the data members of the outer class its nested in.
you have to instance it by
    val nested = Outer().Nested()
